// <auto-generated />
using System;
using BugTracker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BugTracker.Persistence.Migrations
{
    [DbContext(typeof(BugTrackerContext))]
    [Migration("20200413142605_AddSeedData")]
    partial class AddSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BugTracker.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dummy project for testing",
                            Name = "Test Project 1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Dummy project for testing",
                            Name = "Test Project 2"
                        });
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TicketPriorityId")
                        .HasColumnType("int");

                    b.Property<int>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TicketPriorityId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2020, 4, 7, 0, 26, 4, 708, DateTimeKind.Local).AddTicks(1900),
                            Description = "User menu item is missing in the nav bar",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Missing user nav menu",
                            ProjectId = 1,
                            TicketPriorityId = 4,
                            TicketStatusId = 1,
                            TicketTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2020, 4, 13, 0, 26, 4, 722, DateTimeKind.Local).AddTicks(530),
                            Description = "Link to dashboard page missing in nav",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Missing dashboard nav menu",
                            ProjectId = 1,
                            TicketPriorityId = 4,
                            TicketStatusId = 3,
                            TicketTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2020, 4, 7, 0, 26, 4, 722, DateTimeKind.Local).AddTicks(610),
                            Description = "Create new page where the user can edit the ticket details",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Details page",
                            ProjectId = 2,
                            TicketPriorityId = 3,
                            TicketStatusId = 1,
                            TicketTypeId = 2
                        });
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.TicketPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketPriorities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Trivial problem with little or no impact on progress.",
                            Name = "Trivial"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Minor problem or easily worked around.",
                            Name = "Low"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Has the potential to affect progress.",
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Serious problem that could block progress.",
                            Name = "High"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Problem blocks progress.",
                            Name = "Critical"
                        });
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The issue has been reported and is waiting for the team to action it.",
                            Name = "To Do"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The issue is open and ready for the assignee to start work on it.",
                            Name = "Open"
                        },
                        new
                        {
                            Id = 3,
                            Description = "This issue is being actively worked on at the moment by the assignee.",
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A resolution has been taken, and it is awaiting verification by reporter. From here, issues are either reopened, or are closed.",
                            Name = "Resolved"
                        },
                        new
                        {
                            Id = 5,
                            Description = "This issue was once resolved, but the resolution was deemed incorrect. From here, issues are either marked assigned or resolved.",
                            Name = "Reopened"
                        },
                        new
                        {
                            Id = 6,
                            Description = "The issue is considered finished. The resolution is correct. Issues which are closed can be reopened.",
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "There is a defect in the application code or logic",
                            Name = "Bug"
                        },
                        new
                        {
                            Id = 2,
                            Description = "There is a request for new functionality for the application",
                            Name = "Enhancement"
                        });
                });

            modelBuilder.Entity("BugTracker.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("BugTracker.Domain.Entities.Project", "Project")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Entities.TicketPriority", "Priority")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketPriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Entities.TicketStatus", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BugTracker.Domain.Entities.TicketType", "Type")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
